# names of hurricanes
#from typing import ValuesView

#Hurricane names
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', 
'27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', 
'208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', 
'10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', 
'1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# write your update damages function here:
# this function converts the damages values to floats using the millions/billions conversions in the conversion dictionary
#if there is no damage recorded the entry is unchanged

conversion = {"M": 1000000,
              "B": 1000000000}
              
def damages_to_float(damages):
    #initialising a new list
    float_damages = []
    #iterating through the listand determining if its million (M) or billion (B)
    for value in damages:
        if value[-1] == "M":
            float_damages.append(float(value[:-1])*conversion["M"])
        elif value[-1] == "B":
            float_damages.append(float(value[:-1])*conversion["B"])
        else:
            float_damages.append(value)
    return float_damages

#print(damages_to_float(damages))
#print(len(names), len(months), len(years), len(max_sustained_winds), len(areas_affected), len(deaths))


#the data in each list above is organized such that the data at each index, from 0 to 33, corresponds to the same hurricane.
#challenge: Write a function that constructs a dictionary made out of the lists, where the keys of the dictionary are the names of the hurricanes, 
#and the values are dictionaries themselves containing a key for each piece of data

def hurricane_info(names, months, years, max_sustained_winds, areas_affected, damages, deaths):
    #initialising my dictionary 
    hurricanes = {}
    #checking that all the lists are the same length 
    if len(names)==len(months)==len(years)==len(max_sustained_winds)==len(areas_affected)==len(damages)==len(deaths):
        #iterating through the list
        for i in range(len(names)):
        #populating the dictionary for each hurricane
            hurricanes[names[i]] = {"Name": names[i], "Month": months[i],
            "Year": years[i], "Max Sustained Wind": max_sustained_winds[i], 
            "Areas Affected": areas_affected[i],
            "Damage": damages[i], "Deaths":deaths[i]}
    return hurricanes

hurricanes = (hurricane_info(names, months, years, max_sustained_winds, areas_affected, damages, deaths))
#print(hurricanes["Cuba I"]["Year"])


#Challenge: Write a function that converts the current dictionary of hurricanes to a new dictionary, 
where the keys are years and the values are lists containing a dictionary for each hurricane that occurred in that year.

def hurricane_by_year(hurricane_by_name_dict):
    hurricane_by_year_dict = {}
    for location in hurricane_by_name_dict:
        year = hurricane_by_name_dict[location]["Year"]
        current_cane = hurricane_by_name_dict[location]
        if year not in hurricane_by_year_dict:
            hurricane_by_year_dict[year] = [current_cane]
        else:
            locations = hurricane_by_year_dict[year]
            #print(locations, type(locations))
            locations.append(current_cane)
            #hurricane_by_year_dict[year] = [location]
            
            #hurricane_by_year_dict[year] = hurricane_by_year_dict[year].append(location)
        #print(hurricane_by_year_dict[year])

    return hurricane_by_year_dict

by_year = hurricane_by_year(hurricanes)
print(by_year[1932])

# Challenge: Write a function that counts how often each area is listed as an affected area of a hurricane. 
#Store and return the results in a dictionary where the keys are the affected areas and the values are counts 
#of how many times the areas were affected.

def area_affected_count(dict_of_hurricanes):
    hurricane_by_area_dict = {}
    for location in dict_of_hurricanes:
        areas = dict_of_hurricanes[location]["Areas Affected"]
        #print(areas)
        for area in areas:
            #print(area)
            if area not in hurricane_by_area_dict:
                hurricane_by_area_dict[area]=1
                #print(hurricane_by_area_dict[area])
            else:
                count = hurricane_by_area_dict[area] + 1
                hurricane_by_area_dict[area]= count
    return hurricane_by_area_dict
    
areas_count = area_affected_count(hurricanes)
print(" the areas affected dictionary: {areas_count}".format(areas_count=areas_count))


#Write a function that finds the area affected by the most hurricanes, and how often it was hit.
def most_affected_area(dict_of_hurricanes):
    areas_count = area_affected_count(dict_of_hurricanes)
    max_count = 0
    max_area = ""
    for area, count in areas_count.items():
        if count > max_count:
            max_count = count
            max_area = area
    return "The area most affected is {max_area}. It was hit {max_count} times".format(max_area=max_area, max_count=max_count)

print(most_affected_area(hurricanes))


#Write a function that finds the hurricane that caused the greatest number of deaths, and how many deaths it caused.
def most_deaths(dict_of_hurricanes):
    max_deaths = 0
    max_name = ""
    for name in dict_of_hurricanes:
        num_deaths = dict_of_hurricanes[name]["Deaths"] 
        if num_deaths > max_deaths:
            max_name = name
            max_deaths = num_deaths
    return "The hurricane with the highest death toll was {max_name} with {max_deaths} lives lost".format(max_name=max_name, max_deaths=max_deaths)

print(most_deaths(hurricanes))

#Just as hurricanes are rated by their windspeed, you want to try rating hurricanes based on other metrics.
#Write a function that rates hurricanes on a mortality scale according to the following ratings, 
#where the key is the rating and the value is the upper bound of deaths for that rating.
mortality_scale = {0: 0,
                   1: 100,
                   2: 500,
                   3: 1000,
                   4: 10000}

def cat_by_mortality_scale(dict_of_hurricanes):
    hurricanees_by_mortality = {0:[], 1:[], 2:[], 3:[], 4:[], 5:[]}
    for name in dict_of_hurricanes:
        num_deaths = dict_of_hurricanes[name]["Deaths"] 
        if num_deaths <= mortality_scale[0]:
            hurricanees_by_mortality[0].append(name)
        elif num_deaths <= mortality_scale[1]:
            hurricanees_by_mortality[1].append(name)
        elif num_deaths <= mortality_scale[2]:
            hurricanees_by_mortality[2].append(name)
        elif num_deaths <= mortality_scale[3]:
            hurricanees_by_mortality[3].append(name)
        elif num_deaths <= mortality_scale[4]:
            hurricanees_by_mortality[4].append(name)
        else:
            hurricanees_by_mortality[5].append(name)
    
    return hurricanees_by_mortality

print(cat_by_mortality_scale(hurricanes))


#Write a function that finds the hurricane that caused the greatest damage, and how costly it was.
def hurricane_that_caused_most_damage(dict_of_hurricanes):
    names = []
    damages = []
    for cane in dict_of_hurricanes:
        damage = dict_of_hurricanes[cane]["Damage"]
        name = dict_of_hurricanes[cane]["Name"]
        damages.append(damage)
        names.append(name)
    float_damages = damages_to_float(damages)
    max_damage = 0
    max_name = ""
    for name, cost in zip(names, float_damages):
        if type(cost)!= float:
            continue
        elif cost > max_damage:
            max_damage = cost
            max_name = name
    return "The hurricane that caused the most damage was {max_name}, costing ${max_damage}".format(max_name=max_name, max_damage=max_damage)

print(hurricane_that_caused_most_damage(hurricanes))

# write your catgeorize by damage function here:
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}


#Lastly, you want to rate hurricanes according to how much damage they cause.
#Write a function that rates hurricanes on a damage scale according to the following ratings, 
#where the key is the rating and the value is the upper bound of damage for that rating.

def cat_by_damage(dict_of_hurricanes):
    damage_cat = {0:[], 1:[], 2:[], 3:[], 4:[], 5:[]}
    names = []
    damages = []
    for cane in dict_of_hurricanes:
        damage = dict_of_hurricanes[cane]["Damage"]
        name = dict_of_hurricanes[cane]["Name"]
        damages.append(damage)
        names.append(name)
    float_damages = damages_to_float(damages)
    for name, cost in zip(names, float_damages):
        if cost == "Damages not recorded":
            damage_cat[0].append(name)
        elif cost <= damage_scale[1]:
            damage_cat[1].append(name)
        elif cost <= damage_scale[2]:
            damage_cat[2].append(name)
        elif cost <= damage_scale[3]:
            damage_cat[3].append(name)
        elif cost <= damage_scale[4]:
            damage_cat[4].append(name)
        else:
            damage_cat[5].append(name)
    return damage_cat
print(cat_by_damage(hurricanes))
